{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4fb5fab-0bea-40ae-a3f6-0678c76e3d24",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = \"banking_data.csv\"  # Replace with the correct path to the CSV file\n",
    "banking_data = pd.read_csv(file_path)\n",
    "\n",
    "# 1. Filter out all rows where the Transaction_Amount is greater than 2000\n",
    "filtered_transaction_amount = banking_data[banking_data['Transaction_Amount'] > 2000]\n",
    "print(\"Rows where Transaction_Amount is greater than 2000:\")\n",
    "print(filtered_transaction_amount)\n",
    "\n",
    "# 2. Find all rows where the Transaction_Type is \"Loan Payment\" and Account_Balance is greater than 5000\n",
    "filtered_loan_payment = banking_data[\n",
    "    (banking_data['Transaction_Type'] == \"Loan Payment\") & \n",
    "    (banking_data['Account_Balance'] > 5000)\n",
    "]\n",
    "print(\"\\nRows where Transaction_Type is 'Loan Payment' and Account_Balance > 5000:\")\n",
    "print(filtered_loan_payment)\n",
    "\n",
    "# 3. Extract transactions made in the \"Uptown\" branch\n",
    "filtered_uptown_branch = banking_data[banking_data['Branch'] == \"Uptown\"]\n",
    "print(\"\\nTransactions made in the 'Uptown' branch:\")\n",
    "print(filtered_uptown_branch)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
